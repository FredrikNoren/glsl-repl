{"version":3,"sources":["CodeMirror.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["require","CodeMirror","handleChange","cm","props","onChange","getValue","handleKeyDown","event","onKeyDown","container","codeMirror","this","CodeMirrorInstance","value","options","on","nextProps","val","setValue","className","ref","e","React","isErr","result","hasOwnProperty","shaderFromSource","gl","type","sourceCode","shader","createShader","VERTEX_SHADER","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","Ok","Err","getShaderInfoLog","TriangleStripMesh","positions","positionsBuffer","createBuffer","nVertices","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","length","enableVertexAttribArray","vertexAttribPointer","FLOAT","disableVertexAttribArray","drawArrays","TRIANGLE_STRIP","Float32Array","QuadVertexShader","run","document","createElement","getContext","getExtension","quad","vs","fs","program","shaders","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","tex","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA32F","RGBA","fb","createFramebuffer","pixelStorei","PACK_ALIGNMENT","UNPACK_ALIGNMENT","bindFramebuffer","FRAMEBUFFER","viewport","framebufferTexture2D","COLOR_ATTACHMENT0","drawBuffers","disable","BLEND","CULL_FACE","DEPTH_TEST","useProgram","bind","draw","readBuffer","data","readPixels","Array","from","map","x","join","DefaultShader","App","useState","setShader","setResult","useEffect","theme","mode","lineNumbers","href","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe46948e.chunk.js","sourcesContent":["// Tried https://github.com/JedWatson/react-codemirror first, but because of numerous small issues,\n// such as https://github.com/JedWatson/react-codemirror/issues/110 and\n// https://github.com/JedWatson/react-codemirror/issues/47 which is the root cause, which hasn't been\n// addressed in a long time, it was easier to just create this component.\nimport * as React from 'react';\nimport CodeMirrorInstance from 'codemirror';\nimport \"codemirror/lib/codemirror.css\";\nimport 'codemirror-one-dark-theme/one-dark.css';\nrequire('codemirror/mode/clike/clike');\n\nexport interface CodeMirrorProps {\n  options?: CodeMirrorInstance.EditorConfiguration;\n  value?: string;\n  onChange?: (newValue: string) => void;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  className?: string;\n}\n\nexport class CodeMirror extends React.Component<CodeMirrorProps, {}> {\n  componentDidMount() {\n    if (!this.container) {\n      return;\n    }\n    const cm = CodeMirrorInstance(this.container, { value: this.props.value || '', ...this.props.options });\n    cm.on('change', this.handleChange);\n    cm.on('keydown', this.handleKeyDown as any);\n    this.codeMirror = cm;\n  }\n  componentWillReceiveProps(nextProps: CodeMirrorProps) {\n    const val = nextProps.value || '';\n    if (this.codeMirror && this.codeMirror.getValue() !== val) {\n      this.codeMirror.setValue(val);\n    }\n  }\n  handleChange = (cm: CodeMirrorInstance.Editor) => {\n    if (this.props.onChange) {\n      this.props.onChange(cm.getValue());\n    }\n  }\n  handleKeyDown = (cm: CodeMirrorInstance.Editor, event: KeyboardEvent) => {\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(event);\n    }\n  }\n  container: HTMLDivElement | null = null;\n  codeMirror: CodeMirrorInstance.Editor | undefined;\n  shouldComponentUpdate(nextProps: CodeMirrorProps) {\n    return nextProps.className !== this.props.className;\n  }\n  render() {\n    return <div className={this.props.className} ref={e => this.container = e} />;\n  }\n}\n","import React from 'react';\nimport { CodeMirror } from './CodeMirror';\nimport './App.css';\n\nexport type Result<T, E=string> = ResultOk<T> | ResultError<E>;\nexport interface ResultOk<T> {\n  Ok: T;\n}\nexport interface ResultError<E> {\n  Err: E;\n}\nexport function isErr<T, E>(result: Result<T, E>): result is ResultError<E> {\n  return result.hasOwnProperty('Err');\n}\n\nfunction shaderFromSource(gl: WebGL2RenderingContext, type: 'vertex' | 'fragment', sourceCode: string): Result<WebGLShader, string> {\n  const shader = gl.createShader(type === 'vertex' ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER);\n  if (!shader) {\n    return { Err: 'Failed to create shader' };\n  }\n  gl.shaderSource(shader, sourceCode);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    return { Err: gl.getShaderInfoLog(shader) || 'Unknown shader error' };\n  }\n  return { Ok: shader };\n}\n\nfunction createProgram(gl: WebGL2RenderingContext, shaders: WebGLShader[]): Result<WebGLProgram, string> {\n  const program = gl.createProgram();\n  if (!program) {\n    return { Err: 'Failed to create program' };\n  }\n  for (const shader of shaders) {\n    gl.attachShader(program, shader);\n  }\n  gl.linkProgram(program);\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    return { Err: gl.getProgramInfoLog(program) || 'Unknown linking error' };\n  }\n  return { Ok: program };\n}\n\nclass TriangleStripMesh {\n  private constructor(private gl: WebGL2RenderingContext, positions: Float32Array) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionsBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);\n    this.nVertices = positions.length / 2;\n  }\n  bind() {\n    const gl = this.gl;\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionsBuffer);\n\n    // gl.getAttribLocation(this.program, 'position') should really be used here, but for some reason it doesn't work\n    // on windows, whereas this works on both mac and windows.\n    gl.enableVertexAttribArray(0);\n    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n    gl.disableVertexAttribArray(1);\n    gl.disableVertexAttribArray(2);\n  }\n  draw() {\n    const gl = this.gl;\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, this.nVertices);\n  }\n  positionsBuffer = this.gl.createBuffer();\n  nVertices: number;\n\n  static quad(gl: WebGL2RenderingContext) {\n    return new TriangleStripMesh(gl, new Float32Array([\n      -1, -1,\n      -1, 1,\n      1, -1,\n      1, 1,\n    ]));\n  }\n}\n\nexport const QuadVertexShader = `#version 300 es\nin vec2 vertexPosition;\n\nvoid main() {\n  gl_Position = vec4(vertexPosition, 0.0, 1.0);\n}\n`;\n\nfunction createTexture(gl: WebGL2RenderingContext) {\n  const tex = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, tex);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n  return tex;\n}\n\nfunction run(shader: string) {\n  const canvas = document.createElement('canvas');\n  const gl = canvas.getContext('webgl2');\n  if (!gl) {\n    return 'WebGL2 not available';\n  }\n  if (!gl.getExtension(\"EXT_color_buffer_float\")) {\n    return 'Missing: EXT_color_buffer_float';\n  }\n  if (!gl.getExtension('OES_texture_float_linear')) {\n    return 'Missing: OES_texture_float_linear';\n  }\n  const quad = TriangleStripMesh.quad(gl);\n  const vs = shaderFromSource(gl, 'vertex', QuadVertexShader);\n  const fs = shaderFromSource(gl, 'fragment', shader);\n  if (isErr(vs)) {\n    return vs.Err;\n  }\n  if (isErr(fs)) {\n    return fs.Err;\n  }\n  const program = createProgram(gl, [vs.Ok, fs.Ok]);\n  if (isErr(program)) {\n    return program.Err;\n  }\n  const tex = createTexture(gl);\n  const fb = gl.createFramebuffer();\n  gl.pixelStorei(gl.PACK_ALIGNMENT, 4);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n  gl.viewport(0, 0, 1, 1);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);\n  gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.CULL_FACE);\n  gl.disable(gl.DEPTH_TEST);\n  gl.useProgram(program.Ok);\n  quad.bind();\n  quad.draw();\n  gl.readBuffer(gl.COLOR_ATTACHMENT0);\n  const data = new Float32Array(4);\n  gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.FLOAT, data);\n  return Array.from(data).map(x => '' + x).join(', ');\n}\n\nconst DefaultShader = `#version 300 es\nprecision highp float;\nout vec4 res;\n\nvoid main() {\n  res = vec4(2.0);\n}\n`\n\nfunction App() {\n  const [shader, setShader] = React.useState(DefaultShader);\n  const [result, setResult] = React.useState('');\n  React.useEffect(() => {\n    setResult(run(shader));\n  }, [shader]);\n  return (\n    <div className=\"App\">\n      <div className=\"CodeMirrorContainer\">\n        <CodeMirror\n          value={shader}\n          onChange={setShader}\n          options={{\n            theme: 'one-dark',\n            mode: 'clike',\n            lineNumbers: true\n          }}\n          />\n      </div>\n      <div className=\"Result\">{result}</div>\n      <div className=\"Header\">\n        glsl-repl by <a href=\"https://twitter.com/jfnoren\">@jfnoren</a>. Code on <a href=\"https://github.com/FredrikNoren/glsl-repl\">GitHub</a>. Find it useful? <a href=\"https://www.patreon.com/fredriknoren\">Become a Patron!</a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}